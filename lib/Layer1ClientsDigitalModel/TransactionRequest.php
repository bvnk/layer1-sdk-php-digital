<?php
/**
 * TransactionRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Layer1ClientsDigitalInvoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Digital Asset
 *
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel;

use \ArrayAccess;
use \Layer1ClientsDigitalInvoker\ObjectSerializer;

/**
 * TransactionRequest Class Doc Comment
 *
 * @category Class
 * @package  Layer1ClientsDigitalInvoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'request_id' => 'string',
        'asset' => 'string',
        'asset_pool_id' => 'string',
        'network' => 'string',
        'reference' => 'string',
        'status' => 'string',
        'sources' => '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Participant[]',
        'destinations' => '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Participant[]',
        'type' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'failure' => '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Failure'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'request_id' => 'uuid',
        'asset' => null,
        'asset_pool_id' => 'uuid',
        'network' => null,
        'reference' => null,
        'status' => null,
        'sources' => null,
        'destinations' => null,
        'type' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'failure' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'request_id' => false,
        'asset' => false,
        'asset_pool_id' => false,
        'network' => false,
        'reference' => false,
        'status' => false,
        'sources' => false,
        'destinations' => false,
        'type' => false,
        'created_at' => false,
        'updated_at' => false,
        'failure' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_id' => 'requestId',
        'asset' => 'asset',
        'asset_pool_id' => 'assetPoolId',
        'network' => 'network',
        'reference' => 'reference',
        'status' => 'status',
        'sources' => 'sources',
        'destinations' => 'destinations',
        'type' => 'type',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'failure' => 'failure'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_id' => 'setRequestId',
        'asset' => 'setAsset',
        'asset_pool_id' => 'setAssetPoolId',
        'network' => 'setNetwork',
        'reference' => 'setReference',
        'status' => 'setStatus',
        'sources' => 'setSources',
        'destinations' => 'setDestinations',
        'type' => 'setType',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'failure' => 'setFailure'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_id' => 'getRequestId',
        'asset' => 'getAsset',
        'asset_pool_id' => 'getAssetPoolId',
        'network' => 'getNetwork',
        'reference' => 'getReference',
        'status' => 'getStatus',
        'sources' => 'getSources',
        'destinations' => 'getDestinations',
        'type' => 'getType',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'failure' => 'getFailure'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_BLOCKED = 'BLOCKED';
    public const STATUS_CONFIRMED = 'CONFIRMED';
    public const STATUS_CREATED = 'CREATED';
    public const STATUS_DETECTED = 'DETECTED';
    public const STATUS_FAILED = 'FAILED';
    public const STATUS_FUNDS_RESERVED = 'FUNDS_RESERVED';
    public const STATUS_HELD = 'HELD';
    public const STATUS_REJECTED = 'REJECTED';
    public const STATUS_SCREENING_PASSED = 'SCREENING_PASSED';
    public const STATUS_SCREENING_REQUESTED = 'SCREENING_REQUESTED';
    public const STATUS_SIGNED = 'SIGNED';
    public const STATUS_SUCCESS = 'SUCCESS';
    public const STATUS_UNCONFIRMED = 'UNCONFIRMED';
    public const STATUS_REPLACED = 'REPLACED';
    public const STATUS_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const TYPE_DEPOSIT = 'DEPOSIT';
    public const TYPE_WITHDRAWAL = 'WITHDRAWAL';
    public const TYPE_CONSOLIDATION = 'CONSOLIDATION';
    public const TYPE__RETURN = 'RETURN';
    public const TYPE_STAKE = 'STAKE';
    public const TYPE_UNSTAKE = 'UNSTAKE';
    public const TYPE_DELEGATE = 'DELEGATE';
    public const TYPE_UNDELEGATE = 'UNDELEGATE';
    public const TYPE_RELEASE = 'RELEASE';
    public const TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_BLOCKED,
            self::STATUS_CONFIRMED,
            self::STATUS_CREATED,
            self::STATUS_DETECTED,
            self::STATUS_FAILED,
            self::STATUS_FUNDS_RESERVED,
            self::STATUS_HELD,
            self::STATUS_REJECTED,
            self::STATUS_SCREENING_PASSED,
            self::STATUS_SCREENING_REQUESTED,
            self::STATUS_SIGNED,
            self::STATUS_SUCCESS,
            self::STATUS_UNCONFIRMED,
            self::STATUS_REPLACED,
            self::STATUS_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DEPOSIT,
            self::TYPE_WITHDRAWAL,
            self::TYPE_CONSOLIDATION,
            self::TYPE__RETURN,
            self::TYPE_STAKE,
            self::TYPE_UNSTAKE,
            self::TYPE_DELEGATE,
            self::TYPE_UNDELEGATE,
            self::TYPE_RELEASE,
            self::TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('request_id', $data ?? [], null);
        $this->setIfExists('asset', $data ?? [], null);
        $this->setIfExists('asset_pool_id', $data ?? [], null);
        $this->setIfExists('network', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('sources', $data ?? [], null);
        $this->setIfExists('destinations', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('failure', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_id
     *
     * @return string|null
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string|null $request_id transaction request id
     *
     * @return self
     */
    public function setRequestId($request_id)
    {
        if (is_null($request_id)) {
            throw new \InvalidArgumentException('non-nullable request_id cannot be null');
        }
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets asset
     *
     * @return string|null
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset
     *
     * @param string|null $asset currency
     *
     * @return self
     */
    public function setAsset($asset)
    {
        if (is_null($asset)) {
            throw new \InvalidArgumentException('non-nullable asset cannot be null');
        }
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets asset_pool_id
     *
     * @return string|null
     */
    public function getAssetPoolId()
    {
        return $this->container['asset_pool_id'];
    }

    /**
     * Sets asset_pool_id
     *
     * @param string|null $asset_pool_id asset pool id
     *
     * @return self
     */
    public function setAssetPoolId($asset_pool_id)
    {
        if (is_null($asset_pool_id)) {
            throw new \InvalidArgumentException('non-nullable asset_pool_id cannot be null');
        }
        $this->container['asset_pool_id'] = $asset_pool_id;

        return $this;
    }

    /**
     * Gets network
     *
     * @return string|null
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param string|null $network crypto network
     *
     * @return self
     */
    public function setNetwork($network)
    {
        if (is_null($network)) {
            throw new \InvalidArgumentException('non-nullable network cannot be null');
        }
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference custom identifier supplied for transaction that is used to link transaction to specific customer or use case
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status transaction request status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            $status = self::STATUS_UNKNOWN_DEFAULT_OPEN_API;
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sources
     *
     * @return \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Participant[]|null
     */
    public function getSources()
    {
        return $this->container['sources'];
    }

    /**
     * Sets sources
     *
     * @param \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Participant[]|null $sources requested list of addresses and amounts that fund the transaction
     *
     * @return self
     */
    public function setSources($sources)
    {
        if (is_null($sources)) {
            throw new \InvalidArgumentException('non-nullable sources cannot be null');
        }
        $this->container['sources'] = $sources;

        return $this;
    }

    /**
     * Gets destinations
     *
     * @return \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Participant[]|null
     */
    public function getDestinations()
    {
        return $this->container['destinations'];
    }

    /**
     * Sets destinations
     *
     * @param \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Participant[]|null $destinations requested list of recipient addresses and amounts that benefit from the transaction
     *
     * @return self
     */
    public function setDestinations($destinations)
    {
        if (is_null($destinations)) {
            throw new \InvalidArgumentException('non-nullable destinations cannot be null');
        }
        $this->container['destinations'] = $destinations;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type transaction request type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            $type = self::TYPE_UNKNOWN_DEFAULT_OPEN_API;
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at timestamp when transaction request was created
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at timestamp when transaction request was updated
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets failure
     *
     * @return \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Failure|null
     */
    public function getFailure()
    {
        return $this->container['failure'];
    }

    /**
     * Sets failure
     *
     * @param \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Failure|null $failure failure details
     *
     * @return self
     */
    public function setFailure($failure)
    {
        if (is_null($failure)) {
            throw new \InvalidArgumentException('non-nullable failure cannot be null');
        }
        $this->container['failure'] = $failure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


