<?php
/**
 * CreateBalanceExportRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Layer1ClientsDigitalInvoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Digital Asset
 *
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel;

use \ArrayAccess;
use \Layer1ClientsDigitalInvoker\ObjectSerializer;

/**
 * CreateBalanceExportRequest Class Doc Comment
 *
 * @category Class
 * @package  Layer1ClientsDigitalInvoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateBalanceExportRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateBalanceExportRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'network' => 'string',
        'asset' => 'string',
        'networks' => 'string[]',
        'assets' => 'string[]',
        'asset_pool_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'network' => null,
        'asset' => null,
        'networks' => null,
        'assets' => null,
        'asset_pool_id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'network' => false,
        'asset' => false,
        'networks' => false,
        'assets' => false,
        'asset_pool_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'network' => 'network',
        'asset' => 'asset',
        'networks' => 'networks',
        'assets' => 'assets',
        'asset_pool_id' => 'assetPoolId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'network' => 'setNetwork',
        'asset' => 'setAsset',
        'networks' => 'setNetworks',
        'assets' => 'setAssets',
        'asset_pool_id' => 'setAssetPoolId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'network' => 'getNetwork',
        'asset' => 'getAsset',
        'networks' => 'getNetworks',
        'assets' => 'getAssets',
        'asset_pool_id' => 'getAssetPoolId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const NETWORK_BASE = 'BASE';
    public const NETWORK_BINANCE = 'BINANCE';
    public const NETWORK_BITCOIN = 'BITCOIN';
    public const NETWORK_BITCOIN_CASH = 'BITCOIN_CASH';
    public const NETWORK_DOGECOIN = 'DOGECOIN';
    public const NETWORK_ETHEREUM = 'ETHEREUM';
    public const NETWORK_LITECOIN = 'LITECOIN';
    public const NETWORK_POLYGON = 'POLYGON';
    public const NETWORK_RIPPLE = 'RIPPLE';
    public const NETWORK_SOLANA = 'SOLANA';
    public const NETWORK_TRON = 'TRON';
    public const NETWORK_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const NETWORKS_BASE = 'BASE';
    public const NETWORKS_BINANCE = 'BINANCE';
    public const NETWORKS_BITCOIN = 'BITCOIN';
    public const NETWORKS_BITCOIN_CASH = 'BITCOIN_CASH';
    public const NETWORKS_DOGECOIN = 'DOGECOIN';
    public const NETWORKS_ETHEREUM = 'ETHEREUM';
    public const NETWORKS_LITECOIN = 'LITECOIN';
    public const NETWORKS_POLYGON = 'POLYGON';
    public const NETWORKS_RIPPLE = 'RIPPLE';
    public const NETWORKS_SOLANA = 'SOLANA';
    public const NETWORKS_TRON = 'TRON';
    public const NETWORKS_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetworkAllowableValues()
    {
        return [
            self::NETWORK_BASE,
            self::NETWORK_BINANCE,
            self::NETWORK_BITCOIN,
            self::NETWORK_BITCOIN_CASH,
            self::NETWORK_DOGECOIN,
            self::NETWORK_ETHEREUM,
            self::NETWORK_LITECOIN,
            self::NETWORK_POLYGON,
            self::NETWORK_RIPPLE,
            self::NETWORK_SOLANA,
            self::NETWORK_TRON,
            self::NETWORK_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetworksAllowableValues()
    {
        return [
            self::NETWORKS_BASE,
            self::NETWORKS_BINANCE,
            self::NETWORKS_BITCOIN,
            self::NETWORKS_BITCOIN_CASH,
            self::NETWORKS_DOGECOIN,
            self::NETWORKS_ETHEREUM,
            self::NETWORKS_LITECOIN,
            self::NETWORKS_POLYGON,
            self::NETWORKS_RIPPLE,
            self::NETWORKS_SOLANA,
            self::NETWORKS_TRON,
            self::NETWORKS_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('network', $data ?? [], null);
        $this->setIfExists('asset', $data ?? [], null);
        $this->setIfExists('networks', $data ?? [], null);
        $this->setIfExists('assets', $data ?? [], null);
        $this->setIfExists('asset_pool_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNetworkAllowableValues();
        if (!is_null($this->container['network']) && !in_array($this->container['network'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'network', must be one of '%s'",
                $this->container['network'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets network
     *
     * @return string|null
     * @deprecated
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param string|null $network network
     *
     * @return self
     * @deprecated
     */
    public function setNetwork($network)
    {
        if (is_null($network)) {
            throw new \InvalidArgumentException('non-nullable network cannot be null');
        }
        $allowedValues = $this->getNetworkAllowableValues();
        if (!in_array($network, $allowedValues, true)) {
            $network = self::NETWORK_UNKNOWN_DEFAULT_OPEN_API;
        }
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets asset
     *
     * @return string|null
     * @deprecated
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset
     *
     * @param string|null $asset asset
     *
     * @return self
     * @deprecated
     */
    public function setAsset($asset)
    {
        if (is_null($asset)) {
            throw new \InvalidArgumentException('non-nullable asset cannot be null');
        }
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets networks
     *
     * @return string[]|null
     */
    public function getNetworks()
    {
        return $this->container['networks'];
    }

    /**
     * Sets networks
     *
     * @param string[]|null $networks networks
     *
     * @return self
     */
    public function setNetworks($networks)
    {
        if (is_null($networks)) {
            throw new \InvalidArgumentException('non-nullable networks cannot be null');
        }
        $allowedValues = $this->getNetworksAllowableValues();
        if (array_diff($networks, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'networks', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }


        $this->container['networks'] = $networks;

        return $this;
    }

    /**
     * Gets assets
     *
     * @return string[]|null
     */
    public function getAssets()
    {
        return $this->container['assets'];
    }

    /**
     * Sets assets
     *
     * @param string[]|null $assets assets
     *
     * @return self
     */
    public function setAssets($assets)
    {
        if (is_null($assets)) {
            throw new \InvalidArgumentException('non-nullable assets cannot be null');
        }


        $this->container['assets'] = $assets;

        return $this;
    }

    /**
     * Gets asset_pool_id
     *
     * @return string|null
     */
    public function getAssetPoolId()
    {
        return $this->container['asset_pool_id'];
    }

    /**
     * Sets asset_pool_id
     *
     * @param string|null $asset_pool_id The ID of the asset pool for which the report will be generated.
     *
     * @return self
     */
    public function setAssetPoolId($asset_pool_id)
    {
        if (is_null($asset_pool_id)) {
            throw new \InvalidArgumentException('non-nullable asset_pool_id cannot be null');
        }
        $this->container['asset_pool_id'] = $asset_pool_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


