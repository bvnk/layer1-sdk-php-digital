<?php
/**
 * Address
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Layer1ClientsDigitalInvoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Digital Asset
 *
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel;

use \ArrayAccess;
use \Layer1ClientsDigitalInvoker\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @package  Layer1ClientsDigitalInvoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Address implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'address' => 'string',
        'asset_pool_id' => 'string',
        'network' => 'string',
        'key_pair_id' => 'string',
        'reference' => 'string',
        'supported_assets' => 'string[]',
        'aliases' => 'string[]',
        'tag' => 'string',
        'balances' => '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Balance[]',
        'customer_id' => 'string',
        'master' => 'bool',
        'supported_networks' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'address' => null,
        'asset_pool_id' => 'uuid',
        'network' => null,
        'key_pair_id' => 'uuid',
        'reference' => null,
        'supported_assets' => null,
        'aliases' => null,
        'tag' => null,
        'balances' => null,
        'customer_id' => null,
        'master' => null,
        'supported_networks' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'address' => false,
        'asset_pool_id' => false,
        'network' => false,
        'key_pair_id' => false,
        'reference' => false,
        'supported_assets' => false,
        'aliases' => false,
        'tag' => false,
        'balances' => false,
        'customer_id' => false,
        'master' => false,
        'supported_networks' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'address' => 'address',
        'asset_pool_id' => 'assetPoolId',
        'network' => 'network',
        'key_pair_id' => 'keyPairId',
        'reference' => 'reference',
        'supported_assets' => 'supportedAssets',
        'aliases' => 'aliases',
        'tag' => 'tag',
        'balances' => 'balances',
        'customer_id' => 'customerId',
        'master' => 'master',
        'supported_networks' => 'supportedNetworks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'address' => 'setAddress',
        'asset_pool_id' => 'setAssetPoolId',
        'network' => 'setNetwork',
        'key_pair_id' => 'setKeyPairId',
        'reference' => 'setReference',
        'supported_assets' => 'setSupportedAssets',
        'aliases' => 'setAliases',
        'tag' => 'setTag',
        'balances' => 'setBalances',
        'customer_id' => 'setCustomerId',
        'master' => 'setMaster',
        'supported_networks' => 'setSupportedNetworks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'address' => 'getAddress',
        'asset_pool_id' => 'getAssetPoolId',
        'network' => 'getNetwork',
        'key_pair_id' => 'getKeyPairId',
        'reference' => 'getReference',
        'supported_assets' => 'getSupportedAssets',
        'aliases' => 'getAliases',
        'tag' => 'getTag',
        'balances' => 'getBalances',
        'customer_id' => 'getCustomerId',
        'master' => 'getMaster',
        'supported_networks' => 'getSupportedNetworks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('asset_pool_id', $data ?? [], null);
        $this->setIfExists('network', $data ?? [], null);
        $this->setIfExists('key_pair_id', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('supported_assets', $data ?? [], null);
        $this->setIfExists('aliases', $data ?? [], null);
        $this->setIfExists('tag', $data ?? [], null);
        $this->setIfExists('balances', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('master', $data ?? [], null);
        $this->setIfExists('supported_networks', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id internal id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address blockchain address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets asset_pool_id
     *
     * @return string|null
     */
    public function getAssetPoolId()
    {
        return $this->container['asset_pool_id'];
    }

    /**
     * Sets asset_pool_id
     *
     * @param string|null $asset_pool_id asset pool id
     *
     * @return self
     */
    public function setAssetPoolId($asset_pool_id)
    {
        if (is_null($asset_pool_id)) {
            throw new \InvalidArgumentException('non-nullable asset_pool_id cannot be null');
        }
        $this->container['asset_pool_id'] = $asset_pool_id;

        return $this;
    }

    /**
     * Gets network
     *
     * @return string|null
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param string|null $network crypto network
     *
     * @return self
     */
    public function setNetwork($network)
    {
        if (is_null($network)) {
            throw new \InvalidArgumentException('non-nullable network cannot be null');
        }
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets key_pair_id
     *
     * @return string|null
     */
    public function getKeyPairId()
    {
        return $this->container['key_pair_id'];
    }

    /**
     * Sets key_pair_id
     *
     * @param string|null $key_pair_id key pair id
     *
     * @return self
     */
    public function setKeyPairId($key_pair_id)
    {
        if (is_null($key_pair_id)) {
            throw new \InvalidArgumentException('non-nullable key_pair_id cannot be null');
        }
        $this->container['key_pair_id'] = $key_pair_id;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference key pair reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets supported_assets
     *
     * @return string[]|null
     */
    public function getSupportedAssets()
    {
        return $this->container['supported_assets'];
    }

    /**
     * Sets supported_assets
     *
     * @param string[]|null $supported_assets list of assets supported by network
     *
     * @return self
     */
    public function setSupportedAssets($supported_assets)
    {
        if (is_null($supported_assets)) {
            throw new \InvalidArgumentException('non-nullable supported_assets cannot be null');
        }
        $this->container['supported_assets'] = $supported_assets;

        return $this;
    }

    /**
     * Gets aliases
     *
     * @return string[]|null
     */
    public function getAliases()
    {
        return $this->container['aliases'];
    }

    /**
     * Sets aliases
     *
     * @param string[]|null $aliases alternative address (e.g. BTC has segwitt and legacy format)
     *
     * @return self
     */
    public function setAliases($aliases)
    {
        if (is_null($aliases)) {
            throw new \InvalidArgumentException('non-nullable aliases cannot be null');
        }
        $this->container['aliases'] = $aliases;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string|null $tag destination tag that serves as optional payment identifier. Only applicable to select networks like Ripple, Solana etc.
     *
     * @return self
     */
    public function setTag($tag)
    {
        if (is_null($tag)) {
            throw new \InvalidArgumentException('non-nullable tag cannot be null');
        }
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets balances
     *
     * @return \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Balance[]|null
     */
    public function getBalances()
    {
        return $this->container['balances'];
    }

    /**
     * Sets balances
     *
     * @param \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Balance[]|null $balances address balances
     *
     * @return self
     */
    public function setBalances($balances)
    {
        if (is_null($balances)) {
            throw new \InvalidArgumentException('non-nullable balances cannot be null');
        }
        $this->container['balances'] = $balances;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id custom non-unique identifier supplied for address that is used to link address to external entity like customer
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets master
     *
     * @return bool|null
     */
    public function getMaster()
    {
        return $this->container['master'];
    }

    /**
     * Sets master
     *
     * @param bool|null $master flag indicating whether this address is asset pool master address
     *
     * @return self
     */
    public function setMaster($master)
    {
        if (is_null($master)) {
            throw new \InvalidArgumentException('non-nullable master cannot be null');
        }
        $this->container['master'] = $master;

        return $this;
    }

    /**
     * Gets supported_networks
     *
     * @return string[]|null
     */
    public function getSupportedNetworks()
    {
        return $this->container['supported_networks'];
    }

    /**
     * Sets supported_networks
     *
     * @param string[]|null $supported_networks list of networks supporting given asset. mutually exclusive with network and supportedAssets
     *
     * @return self
     */
    public function setSupportedNetworks($supported_networks)
    {
        if (is_null($supported_networks)) {
            throw new \InvalidArgumentException('non-nullable supported_networks cannot be null');
        }
        $this->container['supported_networks'] = $supported_networks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


