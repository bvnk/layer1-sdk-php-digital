<?php
/**
 * ScreeningView
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Layer1ClientsDigitalInvoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Digital Asset
 *
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel;

use \ArrayAccess;
use \Layer1ClientsDigitalInvoker\ObjectSerializer;

/**
 * ScreeningView Class Doc Comment
 *
 * @category Class
 * @package  Layer1ClientsDigitalInvoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ScreeningView implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ScreeningView';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_id' => 'string',
        'transaction_hash' => 'string',
        'transaction_status' => 'string',
        'network' => 'string',
        'transaction_metadata' => '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\TransactionMetadata',
        'transaction_created_at' => '\DateTime',
        'transaction_updated_at' => '\DateTime',
        'screening_state' => 'string',
        'screening_reason' => 'string',
        'screening_reason_code' => 'string',
        'screening_created_at' => '\DateTime',
        'screening_updated_at' => '\DateTime',
        'screening_metadata' => '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ScreeningMetadata',
        'participants' => '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Participant[]',
        'operation' => 'string',
        'address_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction_id' => null,
        'transaction_hash' => null,
        'transaction_status' => null,
        'network' => null,
        'transaction_metadata' => null,
        'transaction_created_at' => 'date-time',
        'transaction_updated_at' => 'date-time',
        'screening_state' => null,
        'screening_reason' => null,
        'screening_reason_code' => null,
        'screening_created_at' => 'date-time',
        'screening_updated_at' => 'date-time',
        'screening_metadata' => null,
        'participants' => null,
        'operation' => null,
        'address_id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'transaction_id' => false,
        'transaction_hash' => false,
        'transaction_status' => false,
        'network' => false,
        'transaction_metadata' => false,
        'transaction_created_at' => false,
        'transaction_updated_at' => false,
        'screening_state' => false,
        'screening_reason' => false,
        'screening_reason_code' => false,
        'screening_created_at' => false,
        'screening_updated_at' => false,
        'screening_metadata' => false,
        'participants' => false,
        'operation' => false,
        'address_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_id' => 'transactionId',
        'transaction_hash' => 'transactionHash',
        'transaction_status' => 'transactionStatus',
        'network' => 'network',
        'transaction_metadata' => 'transactionMetadata',
        'transaction_created_at' => 'transactionCreatedAt',
        'transaction_updated_at' => 'transactionUpdatedAt',
        'screening_state' => 'screeningState',
        'screening_reason' => 'screeningReason',
        'screening_reason_code' => 'screeningReasonCode',
        'screening_created_at' => 'screeningCreatedAt',
        'screening_updated_at' => 'screeningUpdatedAt',
        'screening_metadata' => 'screeningMetadata',
        'participants' => 'participants',
        'operation' => 'operation',
        'address_id' => 'addressId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_id' => 'setTransactionId',
        'transaction_hash' => 'setTransactionHash',
        'transaction_status' => 'setTransactionStatus',
        'network' => 'setNetwork',
        'transaction_metadata' => 'setTransactionMetadata',
        'transaction_created_at' => 'setTransactionCreatedAt',
        'transaction_updated_at' => 'setTransactionUpdatedAt',
        'screening_state' => 'setScreeningState',
        'screening_reason' => 'setScreeningReason',
        'screening_reason_code' => 'setScreeningReasonCode',
        'screening_created_at' => 'setScreeningCreatedAt',
        'screening_updated_at' => 'setScreeningUpdatedAt',
        'screening_metadata' => 'setScreeningMetadata',
        'participants' => 'setParticipants',
        'operation' => 'setOperation',
        'address_id' => 'setAddressId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_id' => 'getTransactionId',
        'transaction_hash' => 'getTransactionHash',
        'transaction_status' => 'getTransactionStatus',
        'network' => 'getNetwork',
        'transaction_metadata' => 'getTransactionMetadata',
        'transaction_created_at' => 'getTransactionCreatedAt',
        'transaction_updated_at' => 'getTransactionUpdatedAt',
        'screening_state' => 'getScreeningState',
        'screening_reason' => 'getScreeningReason',
        'screening_reason_code' => 'getScreeningReasonCode',
        'screening_created_at' => 'getScreeningCreatedAt',
        'screening_updated_at' => 'getScreeningUpdatedAt',
        'screening_metadata' => 'getScreeningMetadata',
        'participants' => 'getParticipants',
        'operation' => 'getOperation',
        'address_id' => 'getAddressId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TRANSACTION_STATUS_BLOCKED = 'BLOCKED';
    public const TRANSACTION_STATUS_CONFIRMED = 'CONFIRMED';
    public const TRANSACTION_STATUS_CREATED = 'CREATED';
    public const TRANSACTION_STATUS_DETECTED = 'DETECTED';
    public const TRANSACTION_STATUS_FAILED = 'FAILED';
    public const TRANSACTION_STATUS_FUNDS_RESERVED = 'FUNDS_RESERVED';
    public const TRANSACTION_STATUS_HELD = 'HELD';
    public const TRANSACTION_STATUS_REJECTED = 'REJECTED';
    public const TRANSACTION_STATUS_SCREENING_PASSED = 'SCREENING_PASSED';
    public const TRANSACTION_STATUS_SCREENING_REQUESTED = 'SCREENING_REQUESTED';
    public const TRANSACTION_STATUS_SIGNED = 'SIGNED';
    public const TRANSACTION_STATUS_SUCCESS = 'SUCCESS';
    public const TRANSACTION_STATUS_UNCONFIRMED = 'UNCONFIRMED';
    public const TRANSACTION_STATUS_REPLACED = 'REPLACED';
    public const TRANSACTION_STATUS_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const SCREENING_STATE_APPROVED = 'APPROVED';
    public const SCREENING_STATE_REJECTED = 'REJECTED';
    public const SCREENING_STATE_PENDING_SCREENING = 'PENDING_SCREENING';
    public const SCREENING_STATE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const OPERATION_DEPOSIT = 'DEPOSIT';
    public const OPERATION_WITHDRAWAL = 'WITHDRAWAL';
    public const OPERATION_CONSOLIDATION = 'CONSOLIDATION';
    public const OPERATION__RETURN = 'RETURN';
    public const OPERATION_STAKE = 'STAKE';
    public const OPERATION_UNSTAKE = 'UNSTAKE';
    public const OPERATION_DELEGATE = 'DELEGATE';
    public const OPERATION_UNDELEGATE = 'UNDELEGATE';
    public const OPERATION_RELEASE = 'RELEASE';
    public const OPERATION_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionStatusAllowableValues()
    {
        return [
            self::TRANSACTION_STATUS_BLOCKED,
            self::TRANSACTION_STATUS_CONFIRMED,
            self::TRANSACTION_STATUS_CREATED,
            self::TRANSACTION_STATUS_DETECTED,
            self::TRANSACTION_STATUS_FAILED,
            self::TRANSACTION_STATUS_FUNDS_RESERVED,
            self::TRANSACTION_STATUS_HELD,
            self::TRANSACTION_STATUS_REJECTED,
            self::TRANSACTION_STATUS_SCREENING_PASSED,
            self::TRANSACTION_STATUS_SCREENING_REQUESTED,
            self::TRANSACTION_STATUS_SIGNED,
            self::TRANSACTION_STATUS_SUCCESS,
            self::TRANSACTION_STATUS_UNCONFIRMED,
            self::TRANSACTION_STATUS_REPLACED,
            self::TRANSACTION_STATUS_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScreeningStateAllowableValues()
    {
        return [
            self::SCREENING_STATE_APPROVED,
            self::SCREENING_STATE_REJECTED,
            self::SCREENING_STATE_PENDING_SCREENING,
            self::SCREENING_STATE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationAllowableValues()
    {
        return [
            self::OPERATION_DEPOSIT,
            self::OPERATION_WITHDRAWAL,
            self::OPERATION_CONSOLIDATION,
            self::OPERATION__RETURN,
            self::OPERATION_STAKE,
            self::OPERATION_UNSTAKE,
            self::OPERATION_DELEGATE,
            self::OPERATION_UNDELEGATE,
            self::OPERATION_RELEASE,
            self::OPERATION_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('transaction_hash', $data ?? [], null);
        $this->setIfExists('transaction_status', $data ?? [], null);
        $this->setIfExists('network', $data ?? [], null);
        $this->setIfExists('transaction_metadata', $data ?? [], null);
        $this->setIfExists('transaction_created_at', $data ?? [], null);
        $this->setIfExists('transaction_updated_at', $data ?? [], null);
        $this->setIfExists('screening_state', $data ?? [], null);
        $this->setIfExists('screening_reason', $data ?? [], null);
        $this->setIfExists('screening_reason_code', $data ?? [], null);
        $this->setIfExists('screening_created_at', $data ?? [], null);
        $this->setIfExists('screening_updated_at', $data ?? [], null);
        $this->setIfExists('screening_metadata', $data ?? [], null);
        $this->setIfExists('participants', $data ?? [], null);
        $this->setIfExists('operation', $data ?? [], null);
        $this->setIfExists('address_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTransactionStatusAllowableValues();
        if (!is_null($this->container['transaction_status']) && !in_array($this->container['transaction_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transaction_status', must be one of '%s'",
                $this->container['transaction_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScreeningStateAllowableValues();
        if (!is_null($this->container['screening_state']) && !in_array($this->container['screening_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'screening_state', must be one of '%s'",
                $this->container['screening_state'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($this->container['operation']) && !in_array($this->container['operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'operation', must be one of '%s'",
                $this->container['operation'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id Unique identifier of the transaction
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        if (is_null($transaction_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_id cannot be null');
        }
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets transaction_hash
     *
     * @return string|null
     */
    public function getTransactionHash()
    {
        return $this->container['transaction_hash'];
    }

    /**
     * Sets transaction_hash
     *
     * @param string|null $transaction_hash Blockchain transaction hash
     *
     * @return self
     */
    public function setTransactionHash($transaction_hash)
    {
        if (is_null($transaction_hash)) {
            throw new \InvalidArgumentException('non-nullable transaction_hash cannot be null');
        }
        $this->container['transaction_hash'] = $transaction_hash;

        return $this;
    }

    /**
     * Gets transaction_status
     *
     * @return string|null
     */
    public function getTransactionStatus()
    {
        return $this->container['transaction_status'];
    }

    /**
     * Sets transaction_status
     *
     * @param string|null $transaction_status Current status of the transaction
     *
     * @return self
     */
    public function setTransactionStatus($transaction_status)
    {
        if (is_null($transaction_status)) {
            throw new \InvalidArgumentException('non-nullable transaction_status cannot be null');
        }
        $allowedValues = $this->getTransactionStatusAllowableValues();
        if (!in_array($transaction_status, $allowedValues, true)) {
            $transaction_status = self::TRANSACTION_STATUS_UNKNOWN_DEFAULT_OPEN_API;
        }
        $this->container['transaction_status'] = $transaction_status;

        return $this;
    }

    /**
     * Gets network
     *
     * @return string|null
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param string|null $network Network code used for the transaction
     *
     * @return self
     */
    public function setNetwork($network)
    {
        if (is_null($network)) {
            throw new \InvalidArgumentException('non-nullable network cannot be null');
        }
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets transaction_metadata
     *
     * @return \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\TransactionMetadata|null
     */
    public function getTransactionMetadata()
    {
        return $this->container['transaction_metadata'];
    }

    /**
     * Sets transaction_metadata
     *
     * @param \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\TransactionMetadata|null $transaction_metadata Transaction metadata in JSON format
     *
     * @return self
     */
    public function setTransactionMetadata($transaction_metadata)
    {
        if (is_null($transaction_metadata)) {
            throw new \InvalidArgumentException('non-nullable transaction_metadata cannot be null');
        }
        $this->container['transaction_metadata'] = $transaction_metadata;

        return $this;
    }

    /**
     * Gets transaction_created_at
     *
     * @return \DateTime|null
     */
    public function getTransactionCreatedAt()
    {
        return $this->container['transaction_created_at'];
    }

    /**
     * Sets transaction_created_at
     *
     * @param \DateTime|null $transaction_created_at Timestamp when the transaction was created
     *
     * @return self
     */
    public function setTransactionCreatedAt($transaction_created_at)
    {
        if (is_null($transaction_created_at)) {
            throw new \InvalidArgumentException('non-nullable transaction_created_at cannot be null');
        }
        $this->container['transaction_created_at'] = $transaction_created_at;

        return $this;
    }

    /**
     * Gets transaction_updated_at
     *
     * @return \DateTime|null
     */
    public function getTransactionUpdatedAt()
    {
        return $this->container['transaction_updated_at'];
    }

    /**
     * Sets transaction_updated_at
     *
     * @param \DateTime|null $transaction_updated_at Timestamp when the transaction was last updated
     *
     * @return self
     */
    public function setTransactionUpdatedAt($transaction_updated_at)
    {
        if (is_null($transaction_updated_at)) {
            throw new \InvalidArgumentException('non-nullable transaction_updated_at cannot be null');
        }
        $this->container['transaction_updated_at'] = $transaction_updated_at;

        return $this;
    }

    /**
     * Gets screening_state
     *
     * @return string|null
     */
    public function getScreeningState()
    {
        return $this->container['screening_state'];
    }

    /**
     * Sets screening_state
     *
     * @param string|null $screening_state Screening state of the transaction
     *
     * @return self
     */
    public function setScreeningState($screening_state)
    {
        if (is_null($screening_state)) {
            throw new \InvalidArgumentException('non-nullable screening_state cannot be null');
        }
        $allowedValues = $this->getScreeningStateAllowableValues();
        if (!in_array($screening_state, $allowedValues, true)) {
            $screening_state = self::SCREENING_STATE_UNKNOWN_DEFAULT_OPEN_API;
        }
        $this->container['screening_state'] = $screening_state;

        return $this;
    }

    /**
     * Gets screening_reason
     *
     * @return string|null
     */
    public function getScreeningReason()
    {
        return $this->container['screening_reason'];
    }

    /**
     * Sets screening_reason
     *
     * @param string|null $screening_reason Reason for the screening result
     *
     * @return self
     */
    public function setScreeningReason($screening_reason)
    {
        if (is_null($screening_reason)) {
            throw new \InvalidArgumentException('non-nullable screening_reason cannot be null');
        }
        $this->container['screening_reason'] = $screening_reason;

        return $this;
    }

    /**
     * Gets screening_reason_code
     *
     * @return string|null
     */
    public function getScreeningReasonCode()
    {
        return $this->container['screening_reason_code'];
    }

    /**
     * Sets screening_reason_code
     *
     * @param string|null $screening_reason_code Reason code for the screening result
     *
     * @return self
     */
    public function setScreeningReasonCode($screening_reason_code)
    {
        if (is_null($screening_reason_code)) {
            throw new \InvalidArgumentException('non-nullable screening_reason_code cannot be null');
        }
        $this->container['screening_reason_code'] = $screening_reason_code;

        return $this;
    }

    /**
     * Gets screening_created_at
     *
     * @return \DateTime|null
     */
    public function getScreeningCreatedAt()
    {
        return $this->container['screening_created_at'];
    }

    /**
     * Sets screening_created_at
     *
     * @param \DateTime|null $screening_created_at Timestamp when the screening was created
     *
     * @return self
     */
    public function setScreeningCreatedAt($screening_created_at)
    {
        if (is_null($screening_created_at)) {
            throw new \InvalidArgumentException('non-nullable screening_created_at cannot be null');
        }
        $this->container['screening_created_at'] = $screening_created_at;

        return $this;
    }

    /**
     * Gets screening_updated_at
     *
     * @return \DateTime|null
     */
    public function getScreeningUpdatedAt()
    {
        return $this->container['screening_updated_at'];
    }

    /**
     * Sets screening_updated_at
     *
     * @param \DateTime|null $screening_updated_at Timestamp when the screening was last updated
     *
     * @return self
     */
    public function setScreeningUpdatedAt($screening_updated_at)
    {
        if (is_null($screening_updated_at)) {
            throw new \InvalidArgumentException('non-nullable screening_updated_at cannot be null');
        }
        $this->container['screening_updated_at'] = $screening_updated_at;

        return $this;
    }

    /**
     * Gets screening_metadata
     *
     * @return \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ScreeningMetadata|null
     */
    public function getScreeningMetadata()
    {
        return $this->container['screening_metadata'];
    }

    /**
     * Sets screening_metadata
     *
     * @param \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ScreeningMetadata|null $screening_metadata Screening metadata in JSON format
     *
     * @return self
     */
    public function setScreeningMetadata($screening_metadata)
    {
        if (is_null($screening_metadata)) {
            throw new \InvalidArgumentException('non-nullable screening_metadata cannot be null');
        }
        $this->container['screening_metadata'] = $screening_metadata;

        return $this;
    }

    /**
     * Gets participants
     *
     * @return \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Participant[]|null
     */
    public function getParticipants()
    {
        return $this->container['participants'];
    }

    /**
     * Sets participants
     *
     * @param \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Participant[]|null $participants List of participants involved in the transaction
     *
     * @return self
     */
    public function setParticipants($participants)
    {
        if (is_null($participants)) {
            throw new \InvalidArgumentException('non-nullable participants cannot be null');
        }
        $this->container['participants'] = $participants;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string|null
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string|null $operation Operation type for the screening
     *
     * @return self
     */
    public function setOperation($operation)
    {
        if (is_null($operation)) {
            throw new \InvalidArgumentException('non-nullable operation cannot be null');
        }
        $allowedValues = $this->getOperationAllowableValues();
        if (!in_array($operation, $allowedValues, true)) {
            $operation = self::OPERATION_UNKNOWN_DEFAULT_OPEN_API;
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets address_id
     *
     * @return string|null
     */
    public function getAddressId()
    {
        return $this->container['address_id'];
    }

    /**
     * Sets address_id
     *
     * @param string|null $address_id Unique identifier of the address involved in the screening
     *
     * @return self
     */
    public function setAddressId($address_id)
    {
        if (is_null($address_id)) {
            throw new \InvalidArgumentException('non-nullable address_id cannot be null');
        }
        $this->container['address_id'] = $address_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


