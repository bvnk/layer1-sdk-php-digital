<?php
/**
 * AssetPoolApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Layer1ClientsDigitalInvoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Digital Asset
 *
 * Layer1 API making management of crypto assets simple and easy
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Layer1ClientsDigitalInvoker\Layer1ClientsDigitalApi;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Layer1ClientsDigitalInvoker\ApiException;
use Layer1ClientsDigitalInvoker\Configuration;
use Layer1ClientsDigitalInvoker\FormDataProcessor;
use Layer1ClientsDigitalInvoker\HeaderSelector;
use Layer1ClientsDigitalInvoker\ObjectSerializer;

/**
 * AssetPoolApi Class Doc Comment
 *
 * @category Class
 * @package  Layer1ClientsDigitalInvoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AssetPoolApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createAssetPool' => [
            'application/json',
        ],
        'deleteAssetPool' => [
            'application/json',
        ],
        'getAssetPool' => [
            'application/json',
        ],
        'getAssetPoolBalance' => [
            'application/json',
        ],
        'getAssetPoolMaxWithdrawableAmount' => [
            'application/json',
        ],
        'getAssetPoolSummary' => [
            'application/json',
        ],
        'listAssetPools' => [
            'application/json',
        ],
        'updateAssetPool' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createAssetPool
     *
     * Create asset pool
     *
     * @param  \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\CreateAssetPoolRequest $create_asset_pool_request create_asset_pool_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAssetPool'] to see the possible values for this operation
     *
     * @throws \Layer1ClientsDigitalInvoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|string|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError
     */
    public function createAssetPool($create_asset_pool_request, string $contentType = self::contentTypes['createAssetPool'][0])
    {
        list($response) = $this->createAssetPoolWithHttpInfo($create_asset_pool_request, $contentType);
        return $response;
    }

    /**
     * Operation createAssetPoolWithHttpInfo
     *
     * Create asset pool
     *
     * @param  \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\CreateAssetPoolRequest $create_asset_pool_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAssetPool'] to see the possible values for this operation
     *
     * @throws \Layer1ClientsDigitalInvoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|string|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssetPoolWithHttpInfo($create_asset_pool_request, string $contentType = self::contentTypes['createAssetPool'][0])
    {
        $request = $this->createAssetPoolRequest($create_asset_pool_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
                case 201:
                    return $this->handleResponseWithDataType(
                        'string',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'string',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createAssetPoolAsync
     *
     * Create asset pool
     *
     * @param  \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\CreateAssetPoolRequest $create_asset_pool_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAssetPool'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssetPoolAsync($create_asset_pool_request, string $contentType = self::contentTypes['createAssetPool'][0])
    {
        return $this->createAssetPoolAsyncWithHttpInfo($create_asset_pool_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAssetPoolAsyncWithHttpInfo
     *
     * Create asset pool
     *
     * @param  \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\CreateAssetPoolRequest $create_asset_pool_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAssetPool'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssetPoolAsyncWithHttpInfo($create_asset_pool_request, string $contentType = self::contentTypes['createAssetPool'][0])
    {
        $returnType = 'string';
        $request = $this->createAssetPoolRequest($create_asset_pool_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAssetPool'
     *
     * @param  \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\CreateAssetPoolRequest $create_asset_pool_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAssetPool'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAssetPoolRequest($create_asset_pool_request, string $contentType = self::contentTypes['createAssetPool'][0])
    {

        // verify the required parameter 'create_asset_pool_request' is set
        if ($create_asset_pool_request === null || (is_array($create_asset_pool_request) && count($create_asset_pool_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_asset_pool_request when calling createAssetPool'
            );
        }


        $resourcePath = '/digital/v1/asset-pools';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_asset_pool_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_asset_pool_request));
            } else {
                $httpBody = $create_asset_pool_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAssetPool
     *
     * Delete asset pool
     *
     * @param  string $asset_pool_id asset_pool_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAssetPool'] to see the possible values for this operation
     *
     * @throws \Layer1ClientsDigitalInvoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAssetPool($asset_pool_id, string $contentType = self::contentTypes['deleteAssetPool'][0])
    {
        $this->deleteAssetPoolWithHttpInfo($asset_pool_id, $contentType);
    }

    /**
     * Operation deleteAssetPoolWithHttpInfo
     *
     * Delete asset pool
     *
     * @param  string $asset_pool_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAssetPool'] to see the possible values for this operation
     *
     * @throws \Layer1ClientsDigitalInvoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssetPoolWithHttpInfo($asset_pool_id, string $contentType = self::contentTypes['deleteAssetPool'][0])
    {
        $request = $this->deleteAssetPoolRequest($asset_pool_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteAssetPoolAsync
     *
     * Delete asset pool
     *
     * @param  string $asset_pool_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAssetPool'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssetPoolAsync($asset_pool_id, string $contentType = self::contentTypes['deleteAssetPool'][0])
    {
        return $this->deleteAssetPoolAsyncWithHttpInfo($asset_pool_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAssetPoolAsyncWithHttpInfo
     *
     * Delete asset pool
     *
     * @param  string $asset_pool_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAssetPool'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssetPoolAsyncWithHttpInfo($asset_pool_id, string $contentType = self::contentTypes['deleteAssetPool'][0])
    {
        $returnType = '';
        $request = $this->deleteAssetPoolRequest($asset_pool_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAssetPool'
     *
     * @param  string $asset_pool_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAssetPool'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAssetPoolRequest($asset_pool_id, string $contentType = self::contentTypes['deleteAssetPool'][0])
    {

        // verify the required parameter 'asset_pool_id' is set
        if ($asset_pool_id === null || (is_array($asset_pool_id) && count($asset_pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_pool_id when calling deleteAssetPool'
            );
        }


        $resourcePath = '/digital/v1/asset-pools/{assetPoolId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($asset_pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'assetPoolId' . '}',
                ObjectSerializer::toPathValue($asset_pool_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssetPool
     *
     * Get asset pool
     *
     * @param  string $asset_pool_id asset_pool_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPool'] to see the possible values for this operation
     *
     * @throws \Layer1ClientsDigitalInvoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|string|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError
     */
    public function getAssetPool($asset_pool_id, string $contentType = self::contentTypes['getAssetPool'][0])
    {
        list($response) = $this->getAssetPoolWithHttpInfo($asset_pool_id, $contentType);
        return $response;
    }

    /**
     * Operation getAssetPoolWithHttpInfo
     *
     * Get asset pool
     *
     * @param  string $asset_pool_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPool'] to see the possible values for this operation
     *
     * @throws \Layer1ClientsDigitalInvoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|string|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetPoolWithHttpInfo($asset_pool_id, string $contentType = self::contentTypes['getAssetPool'][0])
    {
        $request = $this->getAssetPoolRequest($asset_pool_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
                case 200:
                    return $this->handleResponseWithDataType(
                        'string',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'string',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAssetPoolAsync
     *
     * Get asset pool
     *
     * @param  string $asset_pool_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPool'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetPoolAsync($asset_pool_id, string $contentType = self::contentTypes['getAssetPool'][0])
    {
        return $this->getAssetPoolAsyncWithHttpInfo($asset_pool_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetPoolAsyncWithHttpInfo
     *
     * Get asset pool
     *
     * @param  string $asset_pool_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPool'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetPoolAsyncWithHttpInfo($asset_pool_id, string $contentType = self::contentTypes['getAssetPool'][0])
    {
        $returnType = 'string';
        $request = $this->getAssetPoolRequest($asset_pool_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssetPool'
     *
     * @param  string $asset_pool_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPool'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAssetPoolRequest($asset_pool_id, string $contentType = self::contentTypes['getAssetPool'][0])
    {

        // verify the required parameter 'asset_pool_id' is set
        if ($asset_pool_id === null || (is_array($asset_pool_id) && count($asset_pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_pool_id when calling getAssetPool'
            );
        }


        $resourcePath = '/digital/v1/asset-pools/{assetPoolId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($asset_pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'assetPoolId' . '}',
                ObjectSerializer::toPathValue($asset_pool_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssetPoolBalance
     *
     * Get asset pool balance
     *
     * @param  string $asset_pool_id asset_pool_id (required)
     * @param  string $network network (required)
     * @param  string $asset asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPoolBalance'] to see the possible values for this operation
     *
     * @throws \Layer1ClientsDigitalInvoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Balance|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError
     */
    public function getAssetPoolBalance($asset_pool_id, $network, $asset, string $contentType = self::contentTypes['getAssetPoolBalance'][0])
    {
        list($response) = $this->getAssetPoolBalanceWithHttpInfo($asset_pool_id, $network, $asset, $contentType);
        return $response;
    }

    /**
     * Operation getAssetPoolBalanceWithHttpInfo
     *
     * Get asset pool balance
     *
     * @param  string $asset_pool_id (required)
     * @param  string $network (required)
     * @param  string $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPoolBalance'] to see the possible values for this operation
     *
     * @throws \Layer1ClientsDigitalInvoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Balance|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetPoolBalanceWithHttpInfo($asset_pool_id, $network, $asset, string $contentType = self::contentTypes['getAssetPoolBalance'][0])
    {
        $request = $this->getAssetPoolBalanceRequest($asset_pool_id, $network, $asset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Balance',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Balance',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Balance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAssetPoolBalanceAsync
     *
     * Get asset pool balance
     *
     * @param  string $asset_pool_id (required)
     * @param  string $network (required)
     * @param  string $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPoolBalance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetPoolBalanceAsync($asset_pool_id, $network, $asset, string $contentType = self::contentTypes['getAssetPoolBalance'][0])
    {
        return $this->getAssetPoolBalanceAsyncWithHttpInfo($asset_pool_id, $network, $asset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetPoolBalanceAsyncWithHttpInfo
     *
     * Get asset pool balance
     *
     * @param  string $asset_pool_id (required)
     * @param  string $network (required)
     * @param  string $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPoolBalance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetPoolBalanceAsyncWithHttpInfo($asset_pool_id, $network, $asset, string $contentType = self::contentTypes['getAssetPoolBalance'][0])
    {
        $returnType = '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Balance';
        $request = $this->getAssetPoolBalanceRequest($asset_pool_id, $network, $asset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssetPoolBalance'
     *
     * @param  string $asset_pool_id (required)
     * @param  string $network (required)
     * @param  string $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPoolBalance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAssetPoolBalanceRequest($asset_pool_id, $network, $asset, string $contentType = self::contentTypes['getAssetPoolBalance'][0])
    {

        // verify the required parameter 'asset_pool_id' is set
        if ($asset_pool_id === null || (is_array($asset_pool_id) && count($asset_pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_pool_id when calling getAssetPoolBalance'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling getAssetPoolBalance'
            );
        }

        // verify the required parameter 'asset' is set
        if ($asset === null || (is_array($asset) && count($asset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset when calling getAssetPoolBalance'
            );
        }


        $resourcePath = '/digital/v1/asset-pools/{assetPoolId}/balances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network,
            'network', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asset,
            'asset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($asset_pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'assetPoolId' . '}',
                ObjectSerializer::toPathValue($asset_pool_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssetPoolMaxWithdrawableAmount
     *
     * Get max asset pool withdrawable balance
     *
     * @param  string $asset_pool_id asset_pool_id (required)
     * @param  string $network network (required)
     * @param  string $asset asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPoolMaxWithdrawableAmount'] to see the possible values for this operation
     *
     * @throws \Layer1ClientsDigitalInvoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Balance|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError
     */
    public function getAssetPoolMaxWithdrawableAmount($asset_pool_id, $network, $asset, string $contentType = self::contentTypes['getAssetPoolMaxWithdrawableAmount'][0])
    {
        list($response) = $this->getAssetPoolMaxWithdrawableAmountWithHttpInfo($asset_pool_id, $network, $asset, $contentType);
        return $response;
    }

    /**
     * Operation getAssetPoolMaxWithdrawableAmountWithHttpInfo
     *
     * Get max asset pool withdrawable balance
     *
     * @param  string $asset_pool_id (required)
     * @param  string $network (required)
     * @param  string $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPoolMaxWithdrawableAmount'] to see the possible values for this operation
     *
     * @throws \Layer1ClientsDigitalInvoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Balance|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetPoolMaxWithdrawableAmountWithHttpInfo($asset_pool_id, $network, $asset, string $contentType = self::contentTypes['getAssetPoolMaxWithdrawableAmount'][0])
    {
        $request = $this->getAssetPoolMaxWithdrawableAmountRequest($asset_pool_id, $network, $asset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Balance',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Balance',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Balance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAssetPoolMaxWithdrawableAmountAsync
     *
     * Get max asset pool withdrawable balance
     *
     * @param  string $asset_pool_id (required)
     * @param  string $network (required)
     * @param  string $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPoolMaxWithdrawableAmount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetPoolMaxWithdrawableAmountAsync($asset_pool_id, $network, $asset, string $contentType = self::contentTypes['getAssetPoolMaxWithdrawableAmount'][0])
    {
        return $this->getAssetPoolMaxWithdrawableAmountAsyncWithHttpInfo($asset_pool_id, $network, $asset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetPoolMaxWithdrawableAmountAsyncWithHttpInfo
     *
     * Get max asset pool withdrawable balance
     *
     * @param  string $asset_pool_id (required)
     * @param  string $network (required)
     * @param  string $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPoolMaxWithdrawableAmount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetPoolMaxWithdrawableAmountAsyncWithHttpInfo($asset_pool_id, $network, $asset, string $contentType = self::contentTypes['getAssetPoolMaxWithdrawableAmount'][0])
    {
        $returnType = '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\Balance';
        $request = $this->getAssetPoolMaxWithdrawableAmountRequest($asset_pool_id, $network, $asset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssetPoolMaxWithdrawableAmount'
     *
     * @param  string $asset_pool_id (required)
     * @param  string $network (required)
     * @param  string $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPoolMaxWithdrawableAmount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAssetPoolMaxWithdrawableAmountRequest($asset_pool_id, $network, $asset, string $contentType = self::contentTypes['getAssetPoolMaxWithdrawableAmount'][0])
    {

        // verify the required parameter 'asset_pool_id' is set
        if ($asset_pool_id === null || (is_array($asset_pool_id) && count($asset_pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_pool_id when calling getAssetPoolMaxWithdrawableAmount'
            );
        }

        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling getAssetPoolMaxWithdrawableAmount'
            );
        }

        // verify the required parameter 'asset' is set
        if ($asset === null || (is_array($asset) && count($asset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset when calling getAssetPoolMaxWithdrawableAmount'
            );
        }


        $resourcePath = '/digital/v1/asset-pools/{assetPoolId}/max-withdrawable-amount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network,
            'network', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asset,
            'asset', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($asset_pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'assetPoolId' . '}',
                ObjectSerializer::toPathValue($asset_pool_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssetPoolSummary
     *
     * Get asset pool summary
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPoolSummary'] to see the possible values for this operation
     *
     * @throws \Layer1ClientsDigitalInvoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\AssetPoolSummary|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError
     */
    public function getAssetPoolSummary(string $contentType = self::contentTypes['getAssetPoolSummary'][0])
    {
        list($response) = $this->getAssetPoolSummaryWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getAssetPoolSummaryWithHttpInfo
     *
     * Get asset pool summary
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPoolSummary'] to see the possible values for this operation
     *
     * @throws \Layer1ClientsDigitalInvoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\AssetPoolSummary|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetPoolSummaryWithHttpInfo(string $contentType = self::contentTypes['getAssetPoolSummary'][0])
    {
        $request = $this->getAssetPoolSummaryRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\AssetPoolSummary',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\AssetPoolSummary',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\AssetPoolSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAssetPoolSummaryAsync
     *
     * Get asset pool summary
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPoolSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetPoolSummaryAsync(string $contentType = self::contentTypes['getAssetPoolSummary'][0])
    {
        return $this->getAssetPoolSummaryAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetPoolSummaryAsyncWithHttpInfo
     *
     * Get asset pool summary
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPoolSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetPoolSummaryAsyncWithHttpInfo(string $contentType = self::contentTypes['getAssetPoolSummary'][0])
    {
        $returnType = '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\AssetPoolSummary';
        $request = $this->getAssetPoolSummaryRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssetPoolSummary'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetPoolSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAssetPoolSummaryRequest(string $contentType = self::contentTypes['getAssetPoolSummary'][0])
    {


        $resourcePath = '/digital/v1/asset-pools/summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAssetPools
     *
     * List asset pools
     *
     * @param  int $page_number page_number (required)
     * @param  int $page_size page_size (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAssetPools'] to see the possible values for this operation
     *
     * @throws \Layer1ClientsDigitalInvoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function listAssetPools($page_number, $page_size, string $contentType = self::contentTypes['listAssetPools'][0])
    {
        $this->listAssetPoolsWithHttpInfo($page_number, $page_size, $contentType);
    }

    /**
     * Operation listAssetPoolsWithHttpInfo
     *
     * List asset pools
     *
     * @param  int $page_number (required)
     * @param  int $page_size (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAssetPools'] to see the possible values for this operation
     *
     * @throws \Layer1ClientsDigitalInvoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAssetPoolsWithHttpInfo($page_number, $page_size, string $contentType = self::contentTypes['listAssetPools'][0])
    {
        $request = $this->listAssetPoolsRequest($page_number, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listAssetPoolsAsync
     *
     * List asset pools
     *
     * @param  int $page_number (required)
     * @param  int $page_size (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAssetPools'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAssetPoolsAsync($page_number, $page_size, string $contentType = self::contentTypes['listAssetPools'][0])
    {
        return $this->listAssetPoolsAsyncWithHttpInfo($page_number, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAssetPoolsAsyncWithHttpInfo
     *
     * List asset pools
     *
     * @param  int $page_number (required)
     * @param  int $page_size (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAssetPools'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAssetPoolsAsyncWithHttpInfo($page_number, $page_size, string $contentType = self::contentTypes['listAssetPools'][0])
    {
        $returnType = '';
        $request = $this->listAssetPoolsRequest($page_number, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAssetPools'
     *
     * @param  int $page_number (required)
     * @param  int $page_size (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAssetPools'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAssetPoolsRequest($page_number, $page_size, string $contentType = self::contentTypes['listAssetPools'][0])
    {

        // verify the required parameter 'page_number' is set
        if ($page_number === null || (is_array($page_number) && count($page_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_number when calling listAssetPools'
            );
        }
        if ($page_number < 0) {
            throw new \InvalidArgumentException('invalid value for "$page_number" when calling AssetPoolApi.listAssetPools, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'page_size' is set
        if ($page_size === null || (is_array($page_size) && count($page_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size when calling listAssetPools'
            );
        }
        if ($page_size > 100) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling AssetPoolApi.listAssetPools, must be smaller than or equal to 100.');
        }
        if ($page_size < 0) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling AssetPoolApi.listAssetPools, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/digital/v1/asset-pools';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_number,
            'pageNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAssetPool
     *
     * Update asset pool
     *
     * @param  string $asset_pool_id asset_pool_id (required)
     * @param  \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\UpdateAssetPoolRequest $update_asset_pool_request update_asset_pool_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAssetPool'] to see the possible values for this operation
     *
     * @throws \Layer1ClientsDigitalInvoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|string|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError
     */
    public function updateAssetPool($asset_pool_id, $update_asset_pool_request, string $contentType = self::contentTypes['updateAssetPool'][0])
    {
        list($response) = $this->updateAssetPoolWithHttpInfo($asset_pool_id, $update_asset_pool_request, $contentType);
        return $response;
    }

    /**
     * Operation updateAssetPoolWithHttpInfo
     *
     * Update asset pool
     *
     * @param  string $asset_pool_id (required)
     * @param  \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\UpdateAssetPoolRequest $update_asset_pool_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAssetPool'] to see the possible values for this operation
     *
     * @throws \Layer1ClientsDigitalInvoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError|string|\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssetPoolWithHttpInfo($asset_pool_id, $update_asset_pool_request, string $contentType = self::contentTypes['updateAssetPool'][0])
    {
        $request = $this->updateAssetPoolRequest($asset_pool_id, $update_asset_pool_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 503:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
                case 200:
                    return $this->handleResponseWithDataType(
                        'string',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'string',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateAssetPoolAsync
     *
     * Update asset pool
     *
     * @param  string $asset_pool_id (required)
     * @param  \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\UpdateAssetPoolRequest $update_asset_pool_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAssetPool'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssetPoolAsync($asset_pool_id, $update_asset_pool_request, string $contentType = self::contentTypes['updateAssetPool'][0])
    {
        return $this->updateAssetPoolAsyncWithHttpInfo($asset_pool_id, $update_asset_pool_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAssetPoolAsyncWithHttpInfo
     *
     * Update asset pool
     *
     * @param  string $asset_pool_id (required)
     * @param  \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\UpdateAssetPoolRequest $update_asset_pool_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAssetPool'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssetPoolAsyncWithHttpInfo($asset_pool_id, $update_asset_pool_request, string $contentType = self::contentTypes['updateAssetPool'][0])
    {
        $returnType = 'string';
        $request = $this->updateAssetPoolRequest($asset_pool_id, $update_asset_pool_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAssetPool'
     *
     * @param  string $asset_pool_id (required)
     * @param  \Layer1ClientsDigitalInvoker\Layer1ClientsDigitalModel\UpdateAssetPoolRequest $update_asset_pool_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAssetPool'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAssetPoolRequest($asset_pool_id, $update_asset_pool_request, string $contentType = self::contentTypes['updateAssetPool'][0])
    {

        // verify the required parameter 'asset_pool_id' is set
        if ($asset_pool_id === null || (is_array($asset_pool_id) && count($asset_pool_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_pool_id when calling updateAssetPool'
            );
        }

        // verify the required parameter 'update_asset_pool_request' is set
        if ($update_asset_pool_request === null || (is_array($update_asset_pool_request) && count($update_asset_pool_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_asset_pool_request when calling updateAssetPool'
            );
        }


        $resourcePath = '/digital/v1/asset-pools/{assetPoolId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($asset_pool_id !== null) {
            $resourcePath = str_replace(
                '{' . 'assetPoolId' . '}',
                ObjectSerializer::toPathValue($asset_pool_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_asset_pool_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_asset_pool_request));
            } else {
                $httpBody = $update_asset_pool_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
